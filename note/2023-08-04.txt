20230804

1. 데이터베이스개요
(1) 테이블은 컬럼(속성, 필드)과 로우(엔티티)로 이루어져있고 서로 연관된 데이터들이 표처럼 구성되어 있다.
2. JDBC(Java Database Connectivity) 프로그래밍 개념
(1) JDBC(Java Database Connectivity) : 자바 패키지의 일부로 자바 프로그램이 데이터 베이스와 연결되어 데이터를 주고 받을 수 있게 해 주는 프로그래밍 인터페이스이다. 자바 데이터베이스 프로그래밍 API라고 할 수 있다.  
(2) JDBC 드라이버 : 오라클 드라이버또는 MySQL 드라이버를 자바가 설치되어 있는 C:\Program Files\Java\jre1.8\lib\ext 폴더에 다음의 두 파일을 복사한다.
ojdbc6.JAR (C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib)
mysql-connector-java-8.0.31.jar (C:\Program Files (x86)\MySQL\Connector J 8.0)
MySQL버전에 따라 드라이버 파일은 다름 ex)mysql-connector-java-8.0.x.jar
(3) Java 8에서 방법 : 이클립스에서 Windows 메뉴 – preferences – Java – Installed JREs – edit – Add External JARs을 통해 두개의 jar를 등록 후 finish (취소: Restore Default 클릭)
(4) Java 8, 11이상에서 방법 : Project – 오른쪽 마우스 클릭 –Properties –Java Build Path –Classpath – Add External JARs – 두개의 jar를 등록 후 – Apply and Close
(5) JDBC프로그래밍 단계와 사용 클래스
1.1 JDBC 드라이버 로드 (JDBC 드라이버를 로드한다) : Class.forName()을 이용. 드라이버 클래스 로딩(드라이버 필요)
사용 API : Class.ForName()
1.2 데이터베이스 연결 (DB에 연결한다) : DriverManager.getConnection()을 이용해 Connection 객체 생성(접속 URL, id, passwd등 필요)
사용 API : java.sql.Connection
1.3 Statement 생성 (SQL문을 수행할 객체 생성한다) : SQL을 이용해 DB를 조회하거나 다룸. Statement는 SQL 처리 기본 객체
사용 API : java.sql.Statement	java.sql.preparedStatement
1.4 SQL문 전송 (SQL문 수행전송하고 결과 받는다): SQL 문 Statement 객체의 executeQuery(), executeUpdate() 메소드를 이용, 데이텁이스로 전달해 처리
사용 API : java.sql.Statement.executeQuery()	java.sql.Statement.executeUpdate()
1.5 결과 받기 : SQL 실행 결과를 반환 받아야 하는 값이 있따면 ResultSet객체로 받음
사용 API : java.sql.ResultSet
1.6 결과 받아 원하는 로직 수행 (수행한 결과를 읽어 원하는 로직을 수행한다 (필요할 때까지 반복)
1.7 연결 해제 ( DB 연결을 끊는다) : 사용한 자원을 반납함
사용 API : java.sql.Connection.close()